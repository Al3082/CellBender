CellBender
==========

Python package for analysis of single-cell RNA sequencing data.

``remove-background``
---------------------

What
    Command line tool for the removal of ambient RNA from a count matrix
    generated by CellRanger ``count``.

Why
    Entries in the count matrix are the sum of real counts and some background
    counts from ambient RNA.
    The purpose of the ``remove-background`` tool is to remove the
    background RNA counts from real cells, and to determine which barcodes
    contain cells and which correspond to "empty" droplets with
    only ambient RNA.  The inference procedure also embeds gene
    expression in a lower-dimensional latent space, which can be used for
    clustering and visualization.

Input
    A raw count matrix from single cell RNA sequencing,
    including cell barcodes and empty droplet barcodes alike.  This should be
    the output of `CellRanger <https://support.10xgenomics.com/
    single-cell-gene-expression/software/pipelines/
    latest/what-is-cell-ranger>`_ ``count`` in the form of an `HDF5
    file <https://support.10xgenomics.com/single-cell-gene-expression/
    software/pipelines/latest/advanced/h5_matrices>`_.

Outputs
    1. The output of the analysis is a new count matrix,
       which is the counts after background subtraction.  The new count matrix
       is also in HDF5 format, and can be used in place of the raw count
       matrix in downstream analyses.
    2. A second output is the probability that each barcode contains a real
       cell.  This information is contained in the HDF5 file.  For users
       who would rather work with CSV files, there is also an output called
       *cell_barcodes.csv* that lists each barcode which has been determined
       to contain a cell.
    3. A third output is a low-dimensional latent representation of the gene
       expression of each cell.  This information is contained in the
       HDF5 file.

    Cell probabilities can be used to filter out empty droplets
    for downstream analyses.  The low-dimensional latent
    representation can be used for visualization and clustering.

Installation
    Create a conda environment and activate it:

    ``$ conda create -n cellbender python=3.6``

    ``$ source activate cellbender``

    Install pytables:

    ``(cellbender) $ conda install -c anaconda pytables``

    Install `pytorch <https://pytorch.org>`_ (cpu):

    ``(cellbender) $ conda install pytorch torchvision -c pytorch``

    Clone this repository and navigate to the directory.
    Install cellbender.

    ``(cellbender) $ pip install -e cellbender``

Example usage
    ``cellbender remove-background
    --input raw_input_file.h5
    --output out.h5
    --expected_cells 5000
    --cuda``

Methodology
    This is a principled approach to data analysis based on inference in
    the context of a generative probabilistic model of single-cell RNA
    sequencing data.  An autoencoder setup is used to generate a prior for
    biological gene expression, and we perform
    variational Bayesian inference within the framework of a latent
    variable model.

    Under the hood, this analysis runs on `Pyro
    <https://github.com/pyro-ppl/pyro/>`_ for the variational
    inference architecture.

Availability
    A GPU-enabled docker image is available from
    the Google Container Registry as
    ``us.gcr.io/broad-dsde-methods/cellbender:latest``

    For `FireCloud <https://portal.firecloud.org/>`_ users,
    a `workflow <https://portal.firecloud.org/#methods/
    broad-dsde-methods/cellbender/10/wdl>`_ is also available as
    ``broad-dsde-methods/cellbender``.
